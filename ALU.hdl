// This file is BASED ON part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: project02starter/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 8-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 8-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 8-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[8], y[8],  // 8-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[8], // 8-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // process the x input
    Mux8(a=x, b=false, sel=zx, out=xOrZero);
    Not8(in=xOrZero, out=xInverted);
    Mux8(a=xOrZero, b=xInverted, sel=nx, out=xOperandToUse);
    
    // start with doing the same but for y...
    Mux8(a=y, b=false, sel=zy, out=yOrZero);
    Not8(in=yOrZero, out=yInverted);
    Mux8(a=yOrZero, b=yInverted, sel=ny, out=yOperandToUse);

    // something for And
    And8(a=xOperandToUse,b=yOperandToUse,out=xAndy);

    // something for Add
    Add8(a=xOperandToUse,b=yOperandToUse,out=xPlusy);
    
    // something to choose between them
    Mux8(a=xAndy,b=xPlusy, sel=f, out=xFy);

    // something to negate the output if needed
    Not8(in=xFy, out=notOut);
    Mux8(a=xFy,b=notOut,sel=no,out=outVal);    
    
    // set the zero flag
    Or8Way(in=outVal, out=resultNonZero);
    Not(in=resultNonZero, out=zr);
    
    // remember to set the negative flag too....
    And8(a=outVal, b=true, out[7]=ng, out=out);

    

}
